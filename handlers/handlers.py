import re
import sqlite3

from aiogram import F
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import ChatPermissions
from loguru import logger

from models.models import connect_session_to_telegram_account
from system.dispatcher import bot, dp, allowed_user_ids

phone_number_pattern = re.compile(r'(\+?\d{1,3}[-\s]?\d{3,4}[-\s]?\d{2,4}[-\s]?\d{2,4})')

async def read_database():
    """–ß—Ç–µ–Ω–∏–µ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    connection = sqlite3.connect('setting/database.db')  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = connection.cursor()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ
    cursor.execute('SELECT * FROM groups')  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    users = cursor.fetchall()  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    cursor.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    return users


async def write_to_database(link):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        conn = sqlite3.connect('setting/database.db')
        cursor = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS links (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                link TEXT NOT NULL UNIQUE,
                added_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞
        cursor.execute('SELECT COUNT(1) FROM links WHERE link = ?', (link,))
        if cursor.fetchone()[0] > 0:
            logger.info(f"–°—Å—ã–ª–∫–∞ '{link}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø–∏—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return
        # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        cursor.execute('INSERT INTO links (link) VALUES (?)', (link,))
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        conn.commit()
        logger.info(f"–°—Å—ã–ª–∫–∞ '{link}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    except sqlite3.Error as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {error}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()


@dp.message(F.text)
async def any_message(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫: –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å, —Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logger.info(f'–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message.text} –æ—Ç {message.from_user.username} {message.from_user.id}. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}')

    if message.entities:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        for entity in message.entities:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
            if entity.type in ["url", "text_link", "mention"]:
                link = message.text[
                       entity.offset:entity.offset + entity.length] if entity.type != "text_link" else entity.url
                logger.info(f"–¢–∏–ø —Å—Å—ã–ª–∫–∏: {entity.type}. –°—Å—ã–ª–∫–∞ ({entity.type}) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ üîó: {link}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ links
                conn = sqlite3.connect('setting/database.db')
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(1) FROM links WHERE link = ?', (link,))
                link_exists = cursor.fetchone()[0] > 0

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ url
                cursor.execute('CREATE TABLE IF NOT EXISTS url (id INTEGER PRIMARY KEY AUTOINCREMENT, url TEXT)')
                cursor.execute('SELECT COUNT(1) FROM url WHERE url = ?', (link,))
                url_exists = cursor.fetchone()[0] > 0
                conn.close()

                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö url, —Ç–æ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if url_exists:
                    logger.info(f"–°—Å—ã–ª–∫–∞ '{link}' –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ url. –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    user_id = message.from_user.id
                    permissions = ChatPermissions(can_send_messages=False)
                    await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user_id, permissions=permissions)
                    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Å—Å—ã–ª–∫—É
                    return  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

                if link_exists:
                    logger.info(f"–°—Å—ã–ª–∫–∞ '{link}' –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ links. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                    return  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

                logger.info(f"–°—Å—ã–ª–∫–∞ '{link}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ ID.")

                username_id = await connect_session_to_telegram_account(link)

                if message.from_user.id not in allowed_user_ids:
                    logger.info(f'ID –≥—Ä—É–ø–ø—ã {link}: {username_id}')
                    users = await read_database()
                    user_found = False
                    for user in users:
                        logger.info(f'ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {user[0]}')
                        if username_id == user[0]:
                            user_found = True
                            user_id = message.from_user.id
                            permissions = ChatPermissions(can_send_messages=False)
                            await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user_id,
                                                           permissions=permissions)
                            logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:({message.from_user.username} '
                                        f'{message.from_user.id}). –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {message.text}')
                            await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Å—Å—ã–ª–∫—É
                    if not user_found:
                        logger.info(
                            f'ID –≥—Ä—É–ø–ø—ã {link}: {username_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')
                        await write_to_database(link)  # –ó–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö


def register_greeting_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.message.register(any_message)
